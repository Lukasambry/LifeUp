version: '3.8'

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: lifeup-traefik
    restart: unless-stopped
    command:
      - "--configFile=/etc/traefik/traefik.yml"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.local.yml:/etc/traefik/traefik.yml:ro
    networks:
      - lifeup-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.lifeup.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: lifeup-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-lifeup}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - lifeup-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Adminer - Database Management
  adminer:
    image: adminer:latest
    container_name: lifeup-adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: dracula
    networks:
      - lifeup-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`adminer.lifeup.localhost`)"
      - "traefik.http.routers.adminer.entrypoints=web"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
    depends_on:
      - postgres
      - traefik

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: lifeup-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-lifeup}?schema=public
      PORT: 3001
      FRONTEND_URL: http://lifeup.localhost
    volumes:
      - ./backend/src:/app/src
      - ./backend/prisma:/app/prisma
      - backend-node-modules:/app/node_modules
    networks:
      - lifeup-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.lifeup.localhost`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=3001"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS,PATCH"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolalloworiginlist=http://lifeup.localhost"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowcredentials=true"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.routers.backend.middlewares=backend-cors"
    depends_on:
      postgres:
        condition: service_healthy
      traefik:
        condition: service_started

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: lifeup-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://api.lifeup.localhost
    volumes:
      - ./frontend/app:/app/app
      - ./frontend/components:/app/components
      - ./frontend/lib:/app/lib
      - ./frontend/public:/app/public
      - frontend-node-modules:/app/node_modules
      - frontend-next:/app/.next
    networks:
      - lifeup-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`lifeup.localhost`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    depends_on:
      - backend
      - traefik

networks:
  lifeup-network:
    driver: bridge

volumes:
  postgres-data:
  backend-node-modules:
  frontend-node-modules:
  frontend-next:
